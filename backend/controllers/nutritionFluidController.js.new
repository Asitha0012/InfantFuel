import NutritionFluid from "../models/NutritionFluid.js";
import { createNotification } from "../utils/notify.js";

// Create fluid intake record (Parent only)
const createFluidIntake = async (req, res) => {
  try {
    console.log("Create fluid intake request from user:", req.user);
    
    // Only parents (non-admin users) can create records
    if (req.user.isAdmin) {
      return res.status(403).json({ message: "Only parents can add fluid intake records" });
    }

    const { childName, fluidType, amount, unit, time, notes } = req.body;

    console.log("Creating fluid intake with data:", {
      childName,
      fluidType,
      amount,
      unit,
      time,
      notes
    });

    const fluidIntake = new NutritionFluid({
      childName,
      parentId: req.user._id,
      fluidType,
      amount,
      unit,
      time: time || new Date(),
      notes
    });

    const savedRecord = await fluidIntake.save();
    console.log("Successfully saved fluid intake:", savedRecord);

    res.status(201).json(savedRecord);
  } catch (error) {
    console.error("Error in createFluidIntake:", error);
    res.status(500).json({ 
      message: error.message,
      details: error.errors // Include validation errors if any
    });
  }
};

// Get fluid intake records (Both parent and health provider)
const getFluidIntakeRecords = async (req, res) => {
  try {
    const { childName, startDate, endDate } = req.query;
    let query = {};

    // If user is parent, only show their records
    if (!req.user.isAdmin) {
      query.parentId = req.user._id;
    }

    if (childName) {
      query.childName = childName;
    }

    if (startDate && endDate) {
      query.time = {
        $gte: new Date(startDate),
        $lte: new Date(endDate)
      };
    }

    const records = await NutritionFluid.find(query)
      .sort({ time: -1 });

    res.json(records);
  } catch (error) {
    console.error("Error in getFluidIntakeRecords:", error);
    res.status(500).json({ message: error.message });
  }
};

// Update fluid intake record (Parent only)
const updateFluidIntake = async (req, res) => {
  try {
    const { id } = req.params;
    
    const record = await NutritionFluid.findById(id);
    if (!record) {
      return res.status(404).json({ message: "Record not found" });
    }

    // Only allow the parent who created the record to update it
    if (record.parentId.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: "Not authorized to update this record" });
    }

    const updatedRecord = await NutritionFluid.findByIdAndUpdate(
      id,
      { ...req.body },
      { new: true }
    );

    res.json(updatedRecord);
  } catch (error) {
    console.error("Error in updateFluidIntake:", error);
    res.status(500).json({ message: error.message });
  }
};

// Delete fluid intake record (Parent only)
const deleteFluidIntake = async (req, res) => {
  try {
    const { id } = req.params;
    
    const record = await NutritionFluid.findById(id);
    if (!record) {
      return res.status(404).json({ message: "Record not found" });
    }

    // Only allow the parent who created the record to delete it
    if (record.parentId.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: "Not authorized to delete this record" });
    }

    await NutritionFluid.findByIdAndDelete(id);
    
    res.json({ message: "Record deleted successfully" });
  } catch (error) {
    console.error("Error in deleteFluidIntake:", error);
    res.status(500).json({ message: error.message });
  }
};

export default {
  createFluidIntake,
  getFluidIntakeRecords,
  updateFluidIntake,
  deleteFluidIntake
};
